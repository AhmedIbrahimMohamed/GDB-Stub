* Merge source code of to final version
  - "What  was done.docx"

* see design.docx document and discuss some issues in it 

  
*complete  instruction decoding functions
- rest of instruction sub classes --> ok  almost
- Auxilary functions like  shift_Shift_c() 
	-- need revise corresponding Aux functions from ARM and assure its correctness 

*complete s case in process packet  
 -handle odd cases in s command : undefined instruction or error in inserting breakpoint 

*complete GDB_Exception handling for all types of exceptions


*handle : saved the "Switched from" Task ID/Prio
-revise that pointers to addresses are incremented/decremented correctly
-commenting all code in uniform manner



*implement D,K commands
- i think  it is a Big addition

* need discuss the TODOs in source code for odd cases


===================================
New TODO-list:

1- map exceptions numbers to signal numbers
- in gdb exception handler 
- in case s,c in process_packet

2- exhaustive commenting of code 
- for step-related functions
- for ahmed functions 
- revise rest of stub functions 

3- in next meeting /10/2015
- we have merged code after 1,2 modifications
- testing Z/z commands
- understand and make a test plan for stepping-related functions
	-- make code review
	--input instructions
	=================================
	discussion 
	
	1- current_Thread_of_focus 
	
	it should be used in process_Packet 
	should it be passes to process_pacekt() as input??
	
	2- review signdness and unsigndness of variables in decoding insrtutions functions
	
	================================================================================================
	New TODO list
	
	1- ensure PC-Prefetch if PC is the source?
	RT-thread make pc-prefetch of Rn : in case of data processing and LDR case , LDM,Branch 
	2- ensure signdnessof operations
	  RT-thread treats mostly all variable as unsigned long 
	
	3-  review all stub functions in
	   - code review and comments
	4- incrementing PC as pointer
	   - RT-thread insrement pointer by 1 to get next ARM-instruction
	       and increment an integer by 4  to get next ARM-instruction
	       
	       
========================================

New TODO list : 7/11/2015
--------------
1- discuss bitmasks
2- discuss 2 functions -->ok
	2-1-Deactivate Sw breakpoint
	2-2- activate SW breakpoint 
	now, we do not have the concept of activate and deactivate of breakpoints , it is either Removed or Active
	we need to eliminate 
	1- these function and spread their code where we need , specifically in stub breakpoint handling-->ok
	2- eliminate the code to support only 2 state of breakpoint (REMOVED,ACTIVE)-->ok
	-REMOVED for break boint deletion and as initial value forBKPT state
	-ACTIVE after BKPT insertion 
	3- eliminate lifetime parameter-->ok
3- dicuss why 
  -- you call  Xil_ICacheInvalidateLine(unsigned int adr) before Gdb_Arch_Remove_BreakPoint()
3- ahmed revise 
his functions and comment them
revise data types of functions' variables and return values and checking  on return values
4- correct behaviour in -->ok
Debug_Main_Step_machine_instruction () -->InsertBpInsideBplist(stub)  -->Activate_Sw_BreakPoints()----> ok 
this activate all breakbpoints and make them active including user breakpoint although it should only activate stub breakpoint
This would be resolved when do step 2 	


--------------- 
	9/11/2015
	done:test one test case of Bx-register,BL-immed
	
	TODO:
	rest of test case for b,blx
	
-----------------
10/11/2015
done: blx r3

todo: blx r3 injection
	  pop pc 
	
	